df.trade[r, 'action.type'] = ifelse(df.trade[r-1, 'holds'] == 0, 'open', 'add')
df.trade[r, 'trade'] = buy.amount
df.trade[r, 'trade.value'] = -buy.price * buy.amount
df.trade[r, 'holds'] = df.trade[r-1, 'holds'] + buy.amount
df.trade[r, 'avg.CPS'] = ifelse(df.trade[r, 'action.type'] == 'open',
buy.price,
(abs(df.trade[r, 'trade.value']) + df.trade[r-1, 'avg.CPS'] * df.trade[r-1, 'holds']) / df.trade[r, 'holds'])
df.trade[r, 'balance'] = df.trade[r-1, 'balance'] + df.trade[r, 'trade.value']
}
else if(ifelse(is.na(df.trade[r, 'sig.action']),F,df.trade[r, 'sig.action'] == 'out') &&
df.trade[r-1, 'holds'] >= max(abs(sell.amount), 1) &&
sell.amount < 0){
df.trade[r, 'action'] = 's'
df.trade[r, 'action.type'] = ifelse(df.trade[r-1, 'holds'] == abs(sell.amount), 'close', 'reduce')
df.trade[r, 'trade'] = sell.amount
df.trade[r, 'trade.value'] = -sell.price * sell.amount
df.trade[r, 'holds'] = df.trade[r-1, 'holds'] + sell.amount
df.trade[r, 'avg.CPS'] = ifelse(df.trade[r, 'action.type'] == 'close', 0, df.trade[r-1, 'avg.CPS'])
df.trade[r, 'balance'] = df.trade[r-1, 'balance'] + df.trade[r, 'trade.value']
}
else{
df.trade[r, 'holds'] = df.trade[r-1, 'holds']
df.trade[r, 'balance'] = df.trade[r-1, 'balance']
df.trade[r, 'avg.CPS'] = df.trade[r-1, 'avg.CPS']
}
# Technically these can be calculated outside for loop. Buw will they be useful?
df.trade[r, 'market.value'] = df.trade[r, 'holds'] * df.trade[r, 'close']
df.trade[r, 'total.cash.flow'] = ifelse(r > 1, df.trade[r-1, 'total.cash.flow'], 0) + df.trade[r, 'trade.value']
df.trade[r, 'net.gain'] = df.trade[r, 'market.value'] + df.trade[r, 'total.cash.flow']
}
r
View(df.trade)
for(r in 2:nrow(df.trade)){
buy.price = df.trade[r, 'open'] * (1 + friction)
sell.price = df.trade[r, 'open'] * (1 - friction)
# sell amount should be NEGATIVE
buy.amount = floor((df.trade[r-1, 'balance']/df.pos[df.pos$date == df.trade[r, 'date'], 'div.by']))
sell.amount = -floor(df.trade[r-1, 'holds'])
# MIND THE ORDER TO UPDATE FIELDS IN BUY/SELL ACTIONS
if(ifelse(is.na(df.trade[r, 'sig.action']),F,df.trade[r, 'sig.action'] == 'in') &&
df.trade[r-1, 'balance'] >= buy.price * buy.amount &&
buy.amount > 0){
df.trade[r, 'action'] = 'b'
df.trade[r, 'action.type'] = ifelse(df.trade[r-1, 'holds'] == 0, 'open', 'add')
# debugging
print(paste("@ row",r,"buy amount is",buy.amount))
df.trade[r, 'trade'] = buy.amount
df.trade[r, 'trade.value'] = -buy.price * buy.amount
df.trade[r, 'holds'] = df.trade[r-1, 'holds'] + buy.amount
df.trade[r, 'avg.CPS'] = ifelse(df.trade[r, 'action.type'] == 'open',
buy.price,
(abs(df.trade[r, 'trade.value']) + df.trade[r-1, 'avg.CPS'] * df.trade[r-1, 'holds']) / df.trade[r, 'holds'])
df.trade[r, 'balance'] = df.trade[r-1, 'balance'] + df.trade[r, 'trade.value']
}
else if(ifelse(is.na(df.trade[r, 'sig.action']),F,df.trade[r, 'sig.action'] == 'out') &&
df.trade[r-1, 'holds'] >= max(abs(sell.amount), 1) &&
sell.amount < 0){
df.trade[r, 'action'] = 's'
df.trade[r, 'action.type'] = ifelse(df.trade[r-1, 'holds'] == abs(sell.amount), 'close', 'reduce')
df.trade[r, 'trade'] = sell.amount
df.trade[r, 'trade.value'] = -sell.price * sell.amount
df.trade[r, 'holds'] = df.trade[r-1, 'holds'] + sell.amount
df.trade[r, 'avg.CPS'] = ifelse(df.trade[r, 'action.type'] == 'close', 0, df.trade[r-1, 'avg.CPS'])
df.trade[r, 'balance'] = df.trade[r-1, 'balance'] + df.trade[r, 'trade.value']
}
else{
df.trade[r, 'holds'] = df.trade[r-1, 'holds']
df.trade[r, 'balance'] = df.trade[r-1, 'balance']
df.trade[r, 'avg.CPS'] = df.trade[r-1, 'avg.CPS']
}
# Technically these can be calculated outside for loop. Buw will they be useful?
df.trade[r, 'market.value'] = df.trade[r, 'holds'] * df.trade[r, 'close']
df.trade[r, 'total.cash.flow'] = ifelse(r > 1, df.trade[r-1, 'total.cash.flow'], 0) + df.trade[r, 'trade.value']
df.trade[r, 'net.gain'] = df.trade[r, 'market.value'] + df.trade[r, 'total.cash.flow']
}
View(df.pos)
View(AMRS)
View(df.stock)
View(df.sig)
unique(df.sig$date)
source('C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies/FUN-runStrategy.R', echo=TRUE)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
duplicated(df.sig$date)
df.sig$date[duplicated(df.sig$date)]
df.signal[df.signal$date == df.sig$date[duplicated(df.sig$date)]]
df.sig[df.sig$date == df.sig$date[duplicated(df.sig$date)]]
df.sig$date[duplicated(df.sig$date)]
df.sig[duplicated(df.sig$date),]
df.sig['date'==df.sig$date[duplicated(df.sig$date)],]
df.sig$date[duplicated(df.sig$date)]
df.sig['date'=='2015-05-08']
df.sig['date'=='2015-05-08',]
df.sig[date=='2015-05-08',]
df.sig['date' =='2015-05-08',]
df.sig['date' == as.Date('2015-05-08'),]
df.sig[date,]
df.sig['date',]
df.sig[,'date']
df.sig[,'date'==df.sig$date[duplicated(df.sig$date)]]
df.sig[,'date'%in%df.sig$date[duplicated(df.sig$date)]]
df.sig[,'date' == '2018-09-05']
df.sig[,'date' > '2018-09-05']
df.sig[,'date' == '2018-09-05']
df.sig[,'date' ]
df.sig[,'date' == as.Date('2018-09-05')]
duplicated(df.sig$date)
df.sig$date[duplicated(df.sig$date)]
df.sig$date
df.sig$date == '2018-09-05'
df.sig$date == as.Date('2018-09-05')
df.sig$date == c('2018-09-05', '2018-09-06'
)
df.sig$date %in% c('2018-09-05', '2018-09-06')
subset(df.sig, date %in% df.sig$date[duplicated(df.sig$date)])
subset(df.sig, date %in% df.sig$date[duplicated(df.sig$date)] & sig.action == 'in')
subset(df.sig, !(date %in% df.sig$date[duplicated(df.sig$date)] & sig.action == 'in'))
source('C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies/FUN-runStrategy.R', echo=TRUE)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
View(run.result)
df.sig = rbind(infunction(df.stock), outfunction(df.stock))
plot(x = run.result$date, y = run.result$close, type='l', xlab = 'Time', ylab = 'Close')
par(new = T)
plot(x = run.result$date, y = run.result$ROI, type = 'l', axes = F, xlab = '', ylab = '',
ylim = c(min(run.result$ROI, run.result$base.ROI), max(run.result$ROI, run.result$base.ROI)), col = 'blue')
axis(side=4, at = pretty(range(min(run.result$ROI, run.result$base.ROI), max(run.result$ROI, run.result$base.ROI))), col = 'blue')
source('C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies/FUN-genSignal.R', echo=TRUE)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
View(run.result)
ticker = "IBM"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
infunction = genSignal.sys1.in
outfunction = genSignal.sys1.out
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
View(run.result)
df.sig = df.stock
df.sig$high.ndays = find.max.in.ndays(df.sig$high, maxn)
df.sig$low.ndays = find.min.in.ndays(df.sig$low, minn)
df.sig$yst.high = shift(df.sig$high, type = 'lag')
df.sig$yst.max = shift(df.sig$high.ndays, type = 'lag')
df.sig = df.sig[complete.cases(df.sig),]
df.sig$sig.action = NA
View(df.sig)
ticker = "AAPL"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
df.sig = rbind(infunction(df.stock), outfunction(df.stock))
plot(x = run.result$date, y = run.result$close, type='l', xlab = 'Time', ylab = 'Close')
par(new = T)
plot(x = run.result$date, y = run.result$ROI, type = 'l', axes = F, xlab = '', ylab = '',
ylim = c(min(run.result$ROI, run.result$base.ROI), max(run.result$ROI, run.result$base.ROI)), col = 'blue')
axis(side=4, at = pretty(range(min(run.result$ROI, run.result$base.ROI), max(run.result$ROI, run.result$base.ROI))), col = 'blue')
abline(v = df.sig[df.sig$sig.action=='in', 'date'])
df.sig = df.stock
df.sig$high.ndays = find.max.in.ndays(df.sig$high, maxn)
df.sig$low.ndays = find.min.in.ndays(df.sig$low, minn)
df.sig$yst.high = shift(df.sig$high, type = 'lag')
df.sig$yst.max = shift(df.sig$high.ndays, type = 'lag')
df.sig = df.sig[complete.cases(df.sig),]
df.sig$sig.action = NA
df.sig[df.sig$yst.high > df.sig$yst.max, 'sig.action'] = 'in'
View(df.sig)
?runMin
?getPosQty
source('C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies/Initiation.R', echo=TRUE)
df.sig = df.stock
df.sig$high.ndays = find.max.in.ndays(df.sig$high, maxn)
df.sig$low.ndays = find.min.in.ndays(df.sig$low, minn)
df.sig$yst.high = shift(df.sig$high, type = 'lag')
df.sig$yst.max = shift(df.sig$high.ndays, type = 'lag')
df.sig = df.sig[complete.cases(df.sig),]
View(df.sig)
runMax()
?runMax
runMax(df.sig$high, 20)
maxn = 20
minn = 20
df.sig$high.ndays = runMax(df.sig$high, maxn)
df.sig$low.ndays = runMin(df.sig$low, minn)
df.sig$yst.low = shift(df.sig$low, type = 'lag')
df.sig$yst.min = shift(df.sig$low.ndays, type = 'lag')
env.trade = new.env()
env.trade$df.trade = df.stock
View(env.trade$df.trade)
trade.prep.turtle = function(df.trade){
df.trade$high.ndays = find.max.in.ndays(df.trade$high, maxn)
df.trade$low.ndays = find.min.in.ndays(df.trade$low, minn)
df.trade$yst.high = shift(df.trade$high, type = 'lag')
df.trade$yst.max = shift(df.trade$high.ndays, type = 'lag')
df.trade = df.trade[complete.cases(df.trade),]
}
trade.prep.turtle(env.trade$df.trade)
View(env.trade$df.trade)
env.test$a = 1
funtest = function(num){
num = 2
}
funtest(env.test$a)
env.test$a
library(quantmod)
library(magrittr)
library(scales)
library(lubridate)
library(ggplot2)
library(plotly)
library(TTR)
library(data.table)
library(dplyr)
library(plotrix)
setwd("C:/Users/lzhou/Google Drive/Investment/Hedgeye")
source('C:/Users/lzhou/Google Drive/Investment/Hedgeye/test.R', echo=TRUE)
View(df.list)
colnames(df.list)
colnames(df.list) = c('date', 'index', 'buy.trade','sell.trade','prev.close','name','ticker','outlook','assist')
df = df.list[,c('ticker','date', 'buy.trade','sell.trade','outlook')]
View(df)
for(tic in unique(df$ticker)){
df.stocks[[tic]] = subset(df, ticker == tic)
}
df.stocks = list()
for(tic in unique(df$ticker)){
df.stocks[[tic]] = subset(df, ticker == tic)
}
df.stocks
unique(df$ticker)
min(df$date)
min(as.Date(df$date))
format(df.list$date, "%m/%d/%Y")
?format
format(df.list$date, format = "%m/%d/%Y")
as.Date(format(df.list$date, format = "%m/%d/%Y"))
as.Date(df.list$date)
as.Date(df.list$date, '%m/%d/%Y')
df.list$date = as.Date(df.list$date, '%m/%d/%Y')
df = df.list[,c('ticker','date', 'buy.trade','sell.trade','outlook')]
list.tics = unique(df$ticker)
df.stocks = list()
for(tic in list.tics){
df.stocks[[tic]] = subset(df, ticker == tic)
}
start <- min(df.list)
start <- min(df.list$date)
ticker = list.tics[[1]]
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
time.unit = 'daily'
ticker = list.tics[[1]]
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols('IBM', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols('AAPL', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
start <- min(df.list$date)
end <- max(df.list$date)
time.unit = 'daily'
getSymbols('AAPL', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
list.tics
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols('XBT', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
ticker
getSymbols('UST10Y', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
getSymbols('XLU', src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
list.tics = lsit(unique(df$ticker))
list.tics = list(unique(df$ticker))
list.tics = list(unique(df$ticker))
list.tics = unique(df$ticker)
levels(list.tics)
list.tics = levels(unique(df$ticker))
list.tics = as.list(levels(unique(df$ticker)))
df.stocks = list()
for(tic in list.tics){
df.stocks[[tic]] = subset(df.list, ticker == tic)
}
start <- min(df.list$date)
end <- max(df.list$date)
time.unit = 'daily'
ticker = list.tics[[1]]
chartSeries(XLU, name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white", subset = "last 12 months")
chartSeries('XLU', name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white", subset = "last 12 months")
View(XLU)
chartSeries(XLU, name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
ticker = list.tics[['XLU']]
getSymbols(eval(parse(text = ticker)), src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
chartSeries(ticker, name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
ticker = list.tics[['XLU']]
getSymbols(eval(parse(text = ticker)), src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
chartSeries(ticker, name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
ticker = list.tics[['XLU']]
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
ticker = list.tics[['XLU']]
list.tics
list.tic[['XLU']]
list.tics[['XLU']]
list.tics = as.list(levels(unique(df$ticker)))
df.stocks = list()
for(tic in list.tics){
df.stocks[[tic]] = subset(df.list, ticker == tic)
}
start <- min(df.list$date)
end <- max(df.list$date)
time.unit = 'daily'
ticker = list.tics[['XLU']]
ticker = 'XLU'
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(df.preds[['XLU']]$buy.trade)
df.preds = list()
for(tic in list.tics){
df.preds[[tic]] = subset(df.list, ticker == tic)
}
addTA(df.preds[['XLU']]$buy.trade)
View(df.preds[['XLU']])
library(xts)
df.xlu = df.preds[['XLU']]
xts(df.xlu)
xts(df.xlu, order.by = df.xlu$date)
df.xlu = xts(df.xlu, order.by = df.xlu$date)
View(df.xlu)
df.xlu = df.preds[['XLU']]
df.xlu = xts(df.xlu[, -1], order.by = df.xlu$date)
View(df.xlu)
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(df.preds[['XLU']]$buy.trade)
addTA(df.xlu$buy.trade)
getSymbols("SPY")
chart_Series(SPY, subset="2011-08::", type = "candlesticks" )
text(9, 112.00, "SOME TEXT", adj=0);
segments(9, 111.5, 12, 111.5) ;
text(9, 112.00, "SOME TEXT", adj=0)
segments(9, 111.5, 12, 111.5)
getSymbols("SPY")
lines.SPY <- (Hi(SPY) + Lo(SPY))/2
names(lines.SPY) <- c("lines")
lines.SPY$BuySell <- ifelse(lag(lines.SPY$lines) > lines.SPY$lines, 1, -1)
chartSeries(SPY, subset="2011-08::", theme=chartTheme('white',
up.col='blue', dn.col='red'))
addTA(lines.SPY$lines[lines.SPY$BuySell == -1,], type='p', col='darkred', pch="_", on=1, cex = 2.5)
addTA(lines.SPY$lines[lines.SPY$BuySell == 1,], type='p', col='green4', pch="_", on=1, cex = 2.5)
?addTA
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(df.xlu$buy.trade)
addTA(df.xlu$buy.trade)
?addTA
View(XLU)
df.xlu = subset(df.xlu, date <= end)
end
df.xlu$date <= end
df.xlu$date
df.xlu = df.preds[['XLU']]
View(df.xlu)
df.xlu = df.preds[['XLU']]
View(df.xlu)
eval(parse(text = ticker))
dates(eval(parse(text = ticker)))
date(eval(parse(text = ticker)))
df.xlu$date %in% date(eval(parse(text = ticker)))
df.xlu = df.xlu[df.xlu$date %in% date(eval(parse(text = ticker))),]
df.xlu = xts(df.xlu[, -1], order.by = df.xlu$date)
df.xlu = subset(df.xlu, date <= end)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(df.xlu$buy.trade)
View(df.xlu)
addTA(df.xlu$buy.trade, on = 1, col = 7)
newTA(df.xlu$buy.trade, on = 1, col = 7)
getSymbols("YHOO")
chartSeries(YHOO)
getSymbols("YHOO")
getSymbols("AAPL")
chartSeries(AAPL)
min55 <- runMin(AAPL$AAPL.Low,55)
addTA(min55,on=1)
View(min55)
View(df.xlu)
buy.trade = df.xlu$buy.trade
View(buy.trade)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
buy.trade = df.xlu$buy.trade
addTA(buy.trade, on = 1, col = 7)
chartSeries(ticker)
chartSeries(eval(parse(text = ticker)))
buy.trade = df.xlu$buy.trade
addTA(buy.trade, on = 1, col = 7)
chartSeries(AAPL)
View(df.xlu)
View(min55)
View(buy.trade)
View(lines.SPY)
View(min55)
View(AAPL)
View(buy.trade)
View(df.xlu)
getSymbols("XLU")
chartSeries(XLU)
View(min55)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
start <- min(df.list$date)
end <- max(df.list$date)
time.unit = 'daily'
ticker = 'XLU'
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.xlu = df.preds[['XLU']]
df.xlu = df.xlu[df.xlu$date %in% date(eval(parse(text = ticker))),]
df.xlu = xts(df.xlu[, -1], order.by = df.xlu$date)
df.xlu = subset(df.xlu, date <= end)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
df.xlu = df.preds[['XLU']]
df.xlu = df.xlu[df.xlu$date %in% date(eval(parse(text = ticker))),]
df.xlu = xts(df.xlu[, -1], order.by = df.xlu$date)
df.xlu = subset(df.xlu, date <= end)
buy.trade = df.xlu$buy.trade
addTA(buy.trade, on = 1, col = 7)
ticker = 'XLU'
View(XLU)
View(df.xlu)
View(buy.trade)
date(XLU)
date(buy.trade)
buy.trade['2018-09-11',]=0
View(buy.trade)
buy.trade['2018-09-11',]
merge(XLU, df.xlu)
test = merge(XLU, df.xlu)
View(test)
buy.trade = (merge(XLU, df.xlu))$buy.trade
merge(XLU, df.xlu)?merge
?merge
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(buy.trade, on = 1, col = 7)
addTA(buy.trade, on = 1, col = 'b')
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
addTA(buy.trade, on = 1, col = 1)
sell.trade = (merge(XLU, df.xlu))$sell.trade
View(sell.trade)
addTA(sell.trade, on = 1, col = 2)
ticker = 'XLI'
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
ticker = 'XLI'
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.xli = df.preds[['XLI']]
df.xli = df.xli[df.xli$date %in% date(eval(parse(text = ticker))),]
df.xli = xts(df.xli[, -1], order.by = df.xli$date)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
buy.trade = (merge(XLI, df.xlu))$buy.trade
sell.trade = (merge(XLI, df.xlu))$sell.trade
addTA(buy.trade, on = 1, col = 1)
addTA(sell.trade, on = 1, col = 2)
ticker = 'XLI'
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.xli = df.preds[['XLI']]
df.xli = df.xli[df.xli$date %in% date(eval(parse(text = ticker))),]
df.xli = xts(df.xli[, -1], order.by = df.xli$date)
chartSeries(eval(parse(text = ticker)), name = ticker, type = "candlesticks", up.col = "black", dn.col = "red",
theme = "white")
buy.trade = (merge(XLI, df.xli))$buy.trade
sell.trade = (merge(XLI, df.xli))$sell.trade
addTA(buy.trade, on = 1, col = 1)
addTA(sell.trade, on = 1, col = 2)
setwd("C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies")
source('C:/Users/lzhou/Google Drive/Investment/R Code/TradeStrategies/Initiation.R', echo=TRUE)
env.stocks.origin$WMT
infunction = genSignal.macd.crx.in
outfunction = genSignal.macd.crx.out
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
View(df.stock)
View(run.result)
write.csv(run.result, 'test_result.csv')
View(run.result)
?rollmax
ticker = "BABA"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
write.csv(run.result,'result.csv')
ticker = "AAPL"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
write.csv(run.result,'result.csv')
ticker = "XOP"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
write.csv(run.result,'result.csv')
ticker = "AAPL"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
infunction = genSignal.sma.crx.in
outfunction = genSignal.sma.crx.out
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
ticker = "XOP"
getSymbols(ticker, src = "yahoo", from = start, to = end, auto.assign = T, periodicity = time.unit)
df.stock = transform.df.stock(eval(parse(text = ticker)), symbol = ticker)
run.result = runStrategy(df.stock, inFUN = infunction, outFUN = outfunction)
write.csv(run.result,'result.csv')
setwd("~/Linda/Plot into list")
